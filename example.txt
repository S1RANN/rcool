OBJECTID <- I
OBJECTID <- H
OBJECTID <- NOT I
OBJECTID <- NOT OBJECTID <- I
OBJECTID <- NOT OBJECTID <- H
OBJECTID <- NOT OBJECTID <- G
OBJECTID <- NOT OBJECTID <- F < I
OBJECTID <- NOT OBJECTID <- E + I < I
OBJECTID <- NOT OBJECTID <- D * I + I < I
OBJECTID <- NOT OBJECTID <- ISVOID I * I + I < I

*not &a + 1 -> *(not (&a)) + 1
* : 2
not : 1
& : 3
+ : 2

%!&a+1 -> %(! (&a)) + 1
% : 2
! : 1
& : 3
+ : 2

*not &a + 1 -> *(not ((&a) + 1))
* : 1
not : 1
& : 3
+ : 2

1 * &a + 2 -> (1 * (&a)) + 2
* : 3
& : 2
+ : 1

def parse_expr(min_precedence):
    lookahead = peek()
    if lookahead is a unary prefix operator with precedence k:
        next()
        lhs = make_unary(lookahead, parse_expr(k + 1))
    else:
        lhs = parse_primary()
        if token == None:
            return lhs
    lookahead = peek()
    while lookahead is binary operator with precedence >= min_precedence:
        next()
        rhs = parse_expr(precedence)
        lhs = make_expr(lookahead, lhs, rhs)
        lookahead = peek()
    return lhs